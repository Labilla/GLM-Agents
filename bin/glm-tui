#!/usr/bin/env python3
import asyncio
from textual.app import App, ComposeResult
from textual.containers import Horizontal, Vertical
from textual.widgets import Header, Footer, Input, Static
from textual.reactive import reactive

class AgentManager(Static):
    # [AUTO] stelle sicher, dass tasks immer existiert
    tasks: list[str] = []
    selected = reactive(0)
    def __init__(self, **kw):
        super().__init__(content="Agents:\n", **kw)
        self.tasks = []
    def add_task(self,name:str):
        self.tasks.append(name); self.refresh()
    def refresh(self,*a,**k):
        # [AUTO] guard gegen fehlende tasks
        if not hasattr(self, 'tasks'): self.tasks = []
        lines=[f"[{i}] {t}" for i,t in enumerate(self.tasks)]
        self.update("Agents:\n"+("\n".join(lines) if lines else ""))

class AgentOutput(Static):
    def write(self,text:str):
        self.update(self.renderable + text + "\n")

class GLMTui(App):
    BINDINGS = [
      ("ctrl+r", "focus","Fokus input"),
      ("r",      "run",  "Run"),
      ("ctrl+s", "stop", "Stop"),
      ("ctrl+k", "palette","Palette"),
      ("ctrl+f", "filter","Filter"),
      ("ctrl+d", "detail","Detail"),
      ("q",      "quit",  "Quit"),
    ]
    def compose(self) -> ComposeResult:
        yield Header("GLM-Agent TUI")
        with Horizontal():
            yield AgentManager(id="agents")
            with Vertical():
                yield AgentOutput(id="output")
                yield Input(id="prompt",placeholder="Aufgabe → Enter")
        yield Footer()

    async def on_input_submitted(self,m:Input.Submitted):
        t = m.value.strip()
        if not t: return
        mgr = self.query_one(AgentManager); mgr.add_task(t)
        self.query_one(Input).value=""
        out = self.query_one(AgentOutput)
        out.write(f"→ [Agent {len(mgr.tasks)-1}] {t}")
        proc = await asyncio.create_subprocess_exec(
            "glm-agent","--chat",t,
            stdout=asyncio.subprocess.PIPE
        )
        async for l in proc.stdout:
            out.write(l.decode().rstrip())
        await proc.wait()
        out.write(f"[done rc={proc.returncode}]")

    def action_focus(self): self.query_one(Input).focus()
    def action_run(self):   self.query_one(Input).focus()
    def action_stop(self):  pass
    def action_palette(self): pass
    def action_filter(self):  pass
    def action_detail(self):  self.query_one(AgentOutput).write("[Detail toggled]")

if __name__=="__main__":
    GLMTui().run()
